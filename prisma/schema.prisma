generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  oauth_token_secret       String? @db.Text
  oauth_token              String? @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String              @id @default(cuid())
  createdAt         DateTime?           @default(now())
  updatedAt         DateTime?           @default(now())
  name              String?
  image             String?
  firstName         String?
  lastName          String?
  email             String              @unique
  emailVerified     DateTime?
  company           String?
  streetAddress     String?
  streetNumber      String?
  apartmentOrUnit   String?
  city              String?
  state             String?
  country           String?
  postalCode        String?
  phoneNumber       String?
  isAdmin           Boolean             @default(false)
  accounts          Account[]
  sessions          Session[]
  cart              Cart[]
  orders            Order[]             @relation()
  wishlist          Wishlist[]
  ProductReview     ProductReview[]
  SubscriptionBoxes SubscriptionBoxes[]
  Box               Box[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Cart {
  id     String     @id @default(cuid())
  userId String     @unique
  items  CartItem[]
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CartItem {
  id        String @id @default(cuid())
  cartId    String @unique
  productId String
  quantity  Int
  cart      Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)
}

model Product {
  id          String    @id @default(cuid())
  name        String
  description String
  price       Int
  image       String
  category    String
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @default(now())
}

model Wishlist {
  id     String         @id @default(cuid())
  userId String
  items  WishlistItem[]
  user   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WishlistItem {
  id         String   @id @default(cuid())
  wishlistId String
  productId  String
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
}

model Order {
  id                              String      @id
  userId                          String
  lineItems                       OrderItem[] @relation()
  user                            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderSuccessEmailSent           Boolean?
  orderShippedEmailSent           Boolean?
  orderCancelledEmailSent         Boolean?
  readyForPickupEmailSent         Boolean?
  orderSuccessEmailSentDateTime   DateTime?
  orderShippedEmailSentDateTime   DateTime?
  orderCancelledEmailSentDateTime DateTime?
  readyForPickupEmailSentDateTime DateTime?

}

model OrderItem {
  id        String @id
  orderId   String
  productId String
  quantity  Int
  order     Order? @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model ProductReview {
  id               String    @id @default(cuid())
  productId        String
  userId           String
  rating           Decimal
  comment          String
  createdAt        DateTime? @default(now())
  updatedAt        DateTime? @default(now())
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  approved         Boolean   @default(false)
  approvedByUserId String?
}

model SubscriptionBoxes {
  id     String @id @default(cuid())
  userId String
  boxId  String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  box    Box    @relation(fields: [boxId], references: [id], onDelete: Cascade)
}

model Box {
  id                String              @id @default(cuid())
  name              String
  userId            String
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  SubscriptionBoxes SubscriptionBoxes[]
}
